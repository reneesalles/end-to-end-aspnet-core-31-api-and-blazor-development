@page "/users/register"

@inject IBookStoreClient _bookStoreClient
@inject NavigationManager _navManager

<PageTitle>Register new User</PageTitle>

<h3>Register new User</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-danger">
        <p>@message</p>
    </div>
}

<div>
    <EditForm Model="RegisterModel" OnValidSubmit="HandleRegistration">
        <fieldset disabled="@IsDisabled">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email Adress</label>
                <InputText id="email" class="form-control" type="email" @bind-Value="RegisterModel.Email" />
                <ValidationMessage For="@(() => RegisterModel.Email)" />
            </div>

            <div class="form-group">
                <label for="firstName">First Name</label>
                <InputText id="firstName" class="form-control" @bind-Value="RegisterModel.FirstName" />
                <ValidationMessage For="@(() => RegisterModel.FirstName)" />
            </div>

            <div class="form-group">
                <label for="lastName">Last Name</label>
                <InputText id="lastName" class="form-control" @bind-Value="RegisterModel.LastName" />
                <ValidationMessage For="@(() => RegisterModel.LastName)" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" class="form-control" type="password" @bind-Value="RegisterModel.Password" />
                <ValidationMessage For="@(() => RegisterModel.Password)" />
            </div>

            <br />

            <button type="submit" class="btn btn-primary btn-block">Register</button>
        </fieldset>
    </EditForm>
</div>

@code {
    UserRegisterDTO RegisterModel = new()
    {
        Role = "User"
    };
    bool IsDisabled = false;
    string message = string.Empty;

    private async Task HandleRegistration()
    {
        try
        {
            message = string.Empty;
            IsDisabled = true;

            await _bookStoreClient.RegisterAsync(RegisterModel);
            _navManager.NavigateTo("/users/login");
        }
        catch (ApiException ex)
        {
            message = !string.IsNullOrEmpty(ex.Response) ? ex.Response : ex.Message;
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
        finally
        {
            IsDisabled = false;
        }
    }
}