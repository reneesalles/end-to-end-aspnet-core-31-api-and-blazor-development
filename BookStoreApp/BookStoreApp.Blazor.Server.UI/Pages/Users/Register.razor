@page "/users/register"

@inject IBookStoreClient _bookStoreClient
@inject NavigationManager _navManager

<PageTitle>Register new User</PageTitle>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-danger">
        <p>@message</p>
    </div>
}

<div class="card-body">
    <EditForm Model="RegisterModel" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="email">Email Adress</label>
            <InputText id="email" class="form-control" type="email" @bind-Value="RegisterModel.Email" />
            <ValidationMessage For="@(() => RegisterModel.Email)" />
        </div>

        <div class="form-group">
            <label for="firstName">First Name</label>
            <InputText id="firstName" class="form-control" @bind-Value="RegisterModel.FirstName" />
            <ValidationMessage For="@(() => RegisterModel.FirstName)" />
        </div>

        <div class="form-group">
            <label for="lastName">Last Name</label>
            <InputText id="lastName" class="form-control" @bind-Value="RegisterModel.LastName" />
            <ValidationMessage For="@(() => RegisterModel.LastName)" />
        </div>

        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" class="form-control" type="password" @bind-Value="RegisterModel.Password" />
            <ValidationMessage For="@(() => RegisterModel.Password)" />
        </div>

        <br/>

        <button type="submit" class="btn btn-primary btn-block">Register</button>
    </EditForm>
</div>

@code {
    UserRegisterDTO RegisterModel = new() {
        Role = "User"
    };
    string message = string.Empty;

    private async Task HandleRegistration()
    {
        try
        {
            await _bookStoreClient.RegisterAsync(RegisterModel);
            _navManager.NavigateTo("/users/login");
        }
        catch (ApiException ex)
        {
            message = ex.Message;
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
    }
}