@page "/users/login"

@inject IAuthenticationService _authService
@inject NavigationManager _navManager

<PageTitle>Login</PageTitle>

<h3>Login</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-danger">
        <p>@message</p>
    </div>
}

<div>
    <EditForm Model="LoginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="email">Email Adress</label>
            <InputText id="email" class="form-control" type="email" @bind-Value="LoginModel.Email" />
            <ValidationMessage For="@(() => LoginModel.Email)" />
        </div>

        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" class="form-control" type="password" @bind-Value="LoginModel.Password" />
            <ValidationMessage For="@(() => LoginModel.Password)" />
        </div>

        <br/>

        <button type="submit" class="btn btn-primary btn-block">Register</button>
    </EditForm>
</div>

@code {
    UserLoginDTO LoginModel = new();
    string message = string.Empty;

    private async Task HandleLogin() {
        try
        {
            var response = await _authService.AuthenticateAsync(LoginModel);

        }
        catch (ApiException ex)
        {
            message = ex.Response;
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
    }
}