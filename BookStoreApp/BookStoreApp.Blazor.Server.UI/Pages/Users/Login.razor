@page "/users/login"

@inject IAuthenticationService _authService
@inject NavigationManager _navManager

<PageTitle>Login</PageTitle>

<h3>Login</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-danger">
        <p>@message</p>
    </div>
}

<div>
    <EditForm Model="LoginModel" OnValidSubmit="HandleLogin">
        <fieldset disabled="@IsDisabled">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email Adress</label>
                <InputText id="email" class="form-control" type="email" @bind-Value="LoginModel.Email" />
                <ValidationMessage For="@(() => LoginModel.Email)" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" class="form-control" type="password" @bind-Value="LoginModel.Password" />
                <ValidationMessage For="@(() => LoginModel.Password)" />
            </div>

            <br />

            <button type="submit" class="btn btn-primary btn-block">Login</button>
        </fieldset>
    </EditForm>
</div>

@code {
    UserLoginDTO LoginModel = new();
    bool IsDisabled = false;
    string message = string.Empty;

    private async Task HandleLogin()
    {
        try
        {
            message = string.Empty;
            IsDisabled = true;
            
            var response = await _authService.AuthenticateAsync(LoginModel);
            if (response)
            {
                _navManager.NavigateTo("/");
            }
        }
        catch (ApiException ex)
        {
            if (ex.StatusCode == 400 || ex.StatusCode == 401 || ex.StatusCode == 404)
                message = "Invalid Credentials";
            else
                message = !string.IsNullOrEmpty(ex.Response) ? ex.Response : ex.Message;
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
        finally
        {
            IsDisabled = false;
        }
    }
}